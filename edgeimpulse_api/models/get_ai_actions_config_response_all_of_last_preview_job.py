# coding: utf-8

"""
    Edge Impulse API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt
from edgeimpulse_api.models.get_ai_actions_config_response_all_of_last_preview_job_proposed_changes import GetAIActionsConfigResponseAllOfLastPreviewJobProposedChanges
from edgeimpulse_api.models.sample import Sample

class GetAIActionsConfigResponseAllOfLastPreviewJob(BaseModel):
    job_id: StrictInt = Field(..., alias="jobId")
    samples: List[Sample] = ...
    proposed_changes: List[GetAIActionsConfigResponseAllOfLastPreviewJobProposedChanges] = Field(..., alias="proposedChanges")
    __properties = ["jobId", "samples", "proposedChanges"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = False

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAIActionsConfigResponseAllOfLastPreviewJob:
        """Create an instance of GetAIActionsConfigResponseAllOfLastPreviewJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in samples (list)
        _items = []
        if self.samples:
            for _item in self.samples:
                if _item:
                    _items.append(_item.to_dict())
            _dict['samples'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in proposed_changes (list)
        _items = []
        if self.proposed_changes:
            for _item in self.proposed_changes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['proposedChanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAIActionsConfigResponseAllOfLastPreviewJob:
        """Create an instance of GetAIActionsConfigResponseAllOfLastPreviewJob from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetAIActionsConfigResponseAllOfLastPreviewJob.construct(**obj)

        _obj = GetAIActionsConfigResponseAllOfLastPreviewJob.construct(**{
            "job_id": obj.get("jobId"),
            "samples": [Sample.from_dict(_item) for _item in obj.get("samples")] if obj.get("samples") is not None else None,
            "proposed_changes": [GetAIActionsConfigResponseAllOfLastPreviewJobProposedChanges.from_dict(_item) for _item in obj.get("proposedChanges")] if obj.get("proposedChanges") is not None else None
        })
        return _obj

